# SPDX-FileCopyrightText: 2025 Rayleigh Research <to@rayleigh.re>
# SPDX-License-Identifier: MIT
# The MIT License (MIT)
# Copyright © 2023 Yuma Rao
# Copyright © 2025 Rayleigh Research

# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the “Software”), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all copies or substantial portions of
# the Software.

# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
# THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

if __name__ != "__mp_main__":
    import time
    import typing
    import bittensor as bt

    from taos.common.neurons.miner import BaseMinerNeuron
    from taos.im.protocol import MarketSimulationStateUpdate

    class Miner(BaseMinerNeuron):
        """
        Miner class implementation for intelligent market simulations.

        Overrides state processing methods to provide the correct signature when attaching axon handlers.
        """
        async def forward(
            self, synapse: MarketSimulationStateUpdate
        ) -> MarketSimulationStateUpdate:
            """
            Processes incoming market simulation state synapse by forwarding to the associated agent class for handling.

            Args:
                synapse (taos.im.protocol.MarketSimulationStateUpdate): The synapse object containing the latest simulation state update.

            Returns:
                taos.im.protocol.MarketSimulationStateUpdate: The synapse object with the 'response' field updated with any instructions generated by the agent.
            """
            start = time.time()
            synapse.decompress(lazy=self.config.agent.params.lazy_load)
            bt.logging.info(f"Decompressed ({time.time() - start}s)")
            synapse.response = self.agent.handle(synapse)
            start = time.time()
            compressed = synapse.clear_inputs().compress()
            bt.logging.debug(f"Compressed ({time.time() - start}s)")
            return compressed
        
        def blacklist_forward(
            self, synapse: MarketSimulationStateUpdate
        ) -> typing.Tuple[bool, str]:
            """
            Apply default blacklisting to all received market simulation state synapses.
            
            Args:
                synapse (taos.im.protocol.MarketSimulationStateUpdate): The synapse object containing the latest simulation state update.

            Returns:
                (bool, str): Tuple containing [1] boolean indicating if the request was blacklisted [2] string containing the message indicating reason for blacklisting.
            """
            return self.blacklist(synapse)
        
        def priority_forward(self, synapse: MarketSimulationStateUpdate) -> float:
            """
            Apply default prioritization to all received simulation state synapses.
            
            Args:
                synapse (taos.im.protocol.MarketSimulationStateUpdate): The synapse object containing the latest simulation state update.

            Returns:
                float: A priority score calculated using the standard priority function.
            """
            return self.priority(synapse)

# This is the main function, which runs the miner.
if __name__ == "__main__":
    with Miner() as miner:
        while True:
            time.sleep(5)
